from aiogram import Bot
from asgiref.sync import sync_to_async
from api.models import User, Admins, Booked, Halls, Foods, Goods, Services, Notify,WebAppData, Presents
from api.tg_bot.database import *
from api.tg_bot.user_private import *

import api.tg_bot.reply as kb
import re

# –ü
# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞



async def notify_user(bot: Bot):
    n = await get_msgs()
    tg_ids_to_delete = []

    for el in n:
        msg = el['msg']
        tg_id = int(el['tg_id'])
        if el['tg_id'] == '-4500825826':
            await bot.send_message(chat_id=-4500825826, text=msg)
            tg_ids_to_delete.append(el['tg_id'])
        else:
            await bot.send_message(chat_id=int(el['tg_id']), text=msg)
            deleted_count = await delete_notifications(tg_id, msg)
            deleted_count = await delete_notifications(tg_id, msg)
            deleted_count = await delete_notifications(tg_id, msg)
            deleted_count = await delete_notifications(tg_id, msg)
            deleted_count = await delete_notifications(tg_id, msg)
            deleted_count = await delete_notifications(tg_id, msg)
            deleted_count = await delete_notifications(tg_id, msg)
            deleted_count = await delete_notifications(tg_id, msg)
            deleted_count = await delete_notifications(tg_id, msg)
            deleted_count = await delete_notifications(tg_id, msg)
            print(deleted_count)
            tg_ids_to_delete.append(el['tg_id'])
    await delete_msgs(tg_ids_to_delete)

async def get_summa(data_id):
    order_data = await get_web_data_all(data_id=data_id)
    order = order_data[0]['order_data']['Order']
    
    total_sum = 0
    discount = 0

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ª–∞
    if 'halls' in order['info']:
        for hall_id, hall_info in order['info']['halls'].items():
            hall_hours = int(hall_info['hours'])
            hall_obj = await sync_to_async(Halls.objects.get)(id=hall_id)
            hall_price_per_hour = hall_obj.price  
            hall_total = hall_hours * hall_price_per_hour

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–∏–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
            if hall_hours >= 6:
                discount = 15
            elif hall_hours == 5:
                discount = 12
            elif hall_hours == 4:
                discount = 9
            elif hall_hours == 3:
                discount = 7
            else:
                discount = 0

            total_sum += hall_total

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ–¥—ã
    if 'foods' in order['info']:
        for food_id, food_info in order['info']['foods'].items():
            food_obj = await sync_to_async(Foods.objects.get)(id=food_id)
            food_price = food_obj.price
            food_quantity = int(food_info['quantity'])
            total_sum += food_price * food_quantity

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥
    if 'services' in order['info']:
        for service_id, service_info in order['info']['services'].items():
            service_obj = await sync_to_async(Services.objects.get)(id=service_id)
            service_price = service_obj.price
            service_quantity = int(service_info['quantity'])
            total_sum += service_price * service_quantity

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if 'goods' in order['info']:
        for goods_id, goods_info in order['info']['goods'].items():
            goods_obj = await sync_to_async(Goods.objects.get)(id=goods_id)
            goods_price = goods_obj.price
            goods_quantity = int(goods_info['quantity'])
            total_sum += goods_price * goods_quantity
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫–æ –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω–µ
    total_sum_with_discount = total_sum - (total_sum * discount / 100)
   
    return total_sum_with_discount, discount


async def getwebdata(bot):
    n = await get_web_data()
    tg_ids_to_delete = []

    for el in n:
        if 'id' not in el:
            print("–û—à–∏–±–∫–∞: –ø–æ–ª–µ 'id' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ—Ç 'id'

        data_id = el['id']

        d = el['order_data']

        if isinstance(d, dict):
            parsed_data = d
        else:
            parsed_data = json.loads(d)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∏ —Å–∫–∏–¥–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞
        summa, discount = await get_summa(data_id)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        tg_id = parsed_data["Order"]["user"]["tg_id"]
        tg_id = int(tg_id)

        # –ó–∞–ª
        hall = list(parsed_data["Order"]["info"]["halls"].values())[0]
        hall_name = hall["name"]
        hall_datetime = hall["datetime"]
        hall_hours = hall["hours"]

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –µ–¥–∞ –∏ —É—Å–ª—É–≥–∏
        additional_items = []

        # –ï–¥–∞
        if 'foods' in parsed_data["Order"]["info"]:
            food_items = parsed_data["Order"]["info"]["foods"]
            for food_id, food in food_items.items():
                food_obj = await sync_to_async(Foods.objects.get)(id=food_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º food_id –∫–∞–∫ ID
                food_name = food_obj.name
                food_weight = food_obj.weight
                food_price = food_obj.price
                food_quantity = food['quantity']
                additional_items.append(f'{food_name} ({food_weight} –≥.) ‚Äî {food_price}‚ÇΩ x {food_quantity}')

        # –£—Å–ª—É–≥–∏
        if 'services' in parsed_data["Order"]["info"]:
            service_items = parsed_data["Order"]["info"]["services"]
            for service_id, service in service_items.items():
                service_obj = await sync_to_async(Services.objects.get)(id=service_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º service_id –∫–∞–∫ ID
                service_name = service_obj.name
                service_time = service_obj.time
                service_price = service_obj.price
                service_quantity = service['quantity']
                additional_items.append(f'{service_name} ({service_time} –º–∏–Ω.) ‚Äî {service_price}‚ÇΩ x {service_quantity}')

        # –¢–æ–≤–∞—Ä—ã
        if 'goods' in parsed_data["Order"]["info"]:
            goods_items = parsed_data["Order"]["info"]["goods"]
            for goods_id, goods in goods_items.items():
                goods_obj = await sync_to_async(Goods.objects.get)(id=goods_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º goods_id –∫–∞–∫ ID
                goods_name = goods_obj.name
                goods_volume = goods_obj.weight
                goods_price = goods_obj.price
                goods_quantity = goods['quantity']
                additional_items.append(f'{goods_name} ({goods_volume} –º–ª.) ‚Äî {goods_price}‚ÇΩ x {goods_quantity}')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏/—É—Å–ª—É–≥–∞–º–∏
        additional_items_str = "\n".join(f"{i+1}. {item}" for i, item in enumerate(additional_items))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f'üõí –í–∞—à –∑–∞–∫–∞–∑\n'
            f'\n'
            f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–ª: {hall_name}\n'
            f'–î–∞—Ç–∞: {hall_datetime}\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {hall_hours}\n'
            f'\n'
            f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n'
            f'{additional_items_str}\n'
            f'\n'
            f'üí≥ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {summa}‚ÇΩ (—Å–∫–∏–¥–∫–∞ {discount}%)'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id=int(tg_id), text=message, reply_markup=kb.check_order(data_id))

        # –ü–æ–º–µ—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
        await view_web_data(data_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    await delete_msgs(tg_ids_to_delete)