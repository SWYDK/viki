from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
import json
from asgiref.sync import sync_to_async
import requests
import api.tg_bot.reply as kb
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import LabeledPrice, PreCheckoutQuery, SuccessfulPayment, ContentType
from aiogram.utils.i18n import gettext as _
from api.tg_bot.classes_functions import Admin
from aiogram import Bot
from api.tg_bot.database import  *
user_private = Router()
from os import getenv, environ
from dotenv import load_dotenv
from aiogram.methods.get_user_profile_photos import GetUserProfilePhotos
import uuid
from api.models import User, Admins, Booked, Halls, Foods, Goods, Services, Notify,WebAppData, Presents
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
import aiohttp
import os
from pathlib import Path
from datetime import datetime
from yookassa import Configuration, Payment

Configuration.account_id = '444865'
Configuration.secret_key = 'test_nI8QUkSZ2iv-HYfnk40r37LBxmSZpev44ko2xCsH0Jo' 

load_dotenv()

bot = Bot(getenv('bot_token'), default=DefaultBotProperties(parse_mode=ParseMode.HTML))

async def get_summa(data_id):
    order_data = await get_web_data_all(data_id=data_id)
    order = order_data[0]['order_data']['Order']
    
    total_sum = 0
    discount = 0

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ª–∞
    if 'halls' in order['info']:
        for hall_id, hall_info in order['info']['halls'].items():
            hall_hours = int(hall_info['hours'])
            hall_obj = await sync_to_async(Halls.objects.get)(id=hall_id)
            hall_price_per_hour = hall_obj.price  
            hall_total = hall_hours * hall_price_per_hour

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–∏–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
            if hall_hours >= 6:
                discount = 15
            elif hall_hours == 5:
                discount = 12
            elif hall_hours == 4:
                discount = 9
            elif hall_hours == 3:
                discount = 7
            else:
                discount = 0

            total_sum += hall_total

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ–¥—ã
    if 'foods' in order['info']:
        for food_id, food_info in order['info']['foods'].items():
            food_obj = await sync_to_async(Foods.objects.get)(id=food_id)
            food_price = food_obj.price
            food_quantity = int(food_info['quantity'])
            total_sum += food_price * food_quantity

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥
    if 'services' in order['info']:
        for service_id, service_info in order['info']['services'].items():
            service_obj = await sync_to_async(Services.objects.get)(id=service_id)
            service_price = service_obj.price
            service_quantity = int(service_info['quantity'])
            total_sum += service_price * service_quantity

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if 'goods' in order['info']:
        for goods_id, goods_info in order['info']['goods'].items():
            goods_obj = await sync_to_async(Goods.objects.get)(id=goods_id)
            goods_price = goods_obj.price
            goods_quantity = int(goods_info['quantity'])
            total_sum += goods_price * goods_quantity
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫–æ –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω–µ
    total_sum_with_discount = total_sum - (total_sum * discount / 100)
   
    return total_sum_with_discount, discount

def create(prices,chat_id):
    idempotence_key = str(uuid.uuid4())
    payment = Payment.create({
            "amount": {
                "value": f"{prices}",
                "currency": "RUB"
            },
            "payment_method_data": {
                "type": "bank_card"
            },
            "capture":True,
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/Vikingrznbot"
            },
            "metadata": {
                "chat_id": chat_id,
            },
            "description": f"–ó–∞–∫–∞–∑ –≤ VIKING"
        },  idempotence_key)

        
    
    confirmation_url = payment.confirmation.confirmation_url

    return confirmation_url , payment.id

def check(payment_id):
    payment = Payment.find_one(payment_id)

    if payment.status == 'succeeded':
        return False
    else:
        return payment.metadata



@user_private.message(CommandStart())
async def start_message(message: Message, bot: Bot):
    UserProfilePhotos = await bot.get_user_profile_photos(user_id=message.from_user.id)
    file_id = 0
    if UserProfilePhotos.total_count > 0:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º `file_id` –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        first_photo = UserProfilePhotos.photos[0][0]
        file_id = first_photo.file_id
        
        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        file = await bot.get_file(file_id=file_id)
        file_path = file.file_path
        file_url = f'https://api.telegram.org/file/bot{bot.token}/{file_path}'
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        save_path = Path('static/media/users') / f'{file_id}.webp'
        save_path.parent.mkdir(parents=True, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                if response.status == 200:
                    with open(save_path, 'wb') as f:
                        f.write(await response.read())


    user_reg = await add_user_data(user_id=message.from_user.id, photo=f'{file_id}.webp', username=message.from_user.username, first_name=message.from_user.first_name )

    if user_reg:
        await message.answer('‚öîÔ∏è –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä–∞–æ–∫–µ-–±–∞–Ω–∏ ¬´Viking¬ª\n'
                            '\n'
                            '–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç:\n'
                            '\n'
                            '‚Äî  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –∑–∞–ª—ã, —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏\n'
                            '‚Äî  –°–¥–µ–ª–∞—Ç—å –æ–Ω–ª–∞–π–Ω-–±—Ä–æ–Ω—å\n'
                            '‚Äî  –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö\n'
                            '\n'
                            'üìç –£–ª. –ö—É—Ç—É–∑–æ–≤–∞ 15\n'
                            '\n'
                            '–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!' ,reply_markup=kb.start_inline(True))
    else:
        await message.answer('‚öîÔ∏è –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä–∞–æ–∫–µ-–±–∞–Ω–∏ ¬´Viking¬ª\n'
                            '\n'
                            '–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç:\n'
                            '\n'
                            '‚Äî  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –∑–∞–ª—ã, —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏\n'
                            '‚Äî  –°–¥–µ–ª–∞—Ç—å –æ–Ω–ª–∞–π–Ω-–±—Ä–æ–Ω—å\n'
                            '‚Äî  –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö\n'
                            '\n'
                            'üìç –£–ª. –ö—É—Ç—É–∑–æ–≤–∞ 15\n'
                            '\n'
                            '–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!' ,reply_markup=kb.start_inline(False))


@user_private.callback_query(F.data.startswith("pay_"))
async def order_delivered_point(callback: CallbackQuery):
    data_id = callback.data.split("_")[1]
    n = await get_web_data_all(data_id=data_id)
    summa, discount = await get_summa(data_id)
    tg_id = n[0]['order_data']['Order']['user']['tg_id']
    summa = summa
    tg_id = int(tg_id)
    confirmation_url,pay_id = create(summa, tg_id)


    await callback.message.edit_text(f'–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ',reply_markup=kb.get_pay(confirmation_url, summa, pay_id, data_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –∞—Ä–µ–Ω–¥—ã
def calculate_discount(hours):
    discount = 0
    if hours >= 6:
        discount = 15
    elif hours == 5:
        discount = 12
    elif hours == 4:
        discount = 9
    elif hours == 3:
        discount = 7
    return discount

async def add_present_to_cart(user: User):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª."""
    if not user.got_present:
        present = await sync_to_async(Presents.objects.first)()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
        if present:
            present_item = {
                'id': present.present.id,
                'name': present.present.name,
                'quantity': 1,
                'price': 0  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
            }

            if not user.data:
                user.data = {'food': {}}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω—É
            user.data['food'][str(present.present.id)] = present_item
            user.got_present = True
            await sync_to_async(user.save)()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

            return present_item

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
@user_private.callback_query(F.data.startswith("pay_"))
async def order_delivered_point(callback: CallbackQuery):
    data_id = callback.data.split("_")[1]

    order_data = await get_web_data_all(data_id=data_id)
    order = order_data[0]['order_data']['Order']
    
    total_sum = 0
    

    tg_id = order['user']['tg_id']
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ tg_id
    user = await sync_to_async(User.objects.get)(tg_id=tg_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if not user.got_present:
        item = await add_present_to_cart(user)

    if 'halls' in order['info']:
        for hall_id, hall_info in order['info']['halls'].items():
            hall_hours = int(hall_info['hours'])
            hall_obj = await sync_to_async(Halls.objects.get)(id=hall_id)
            hall_price_per_hour = hall_obj.price  
            hall_total = hall_hours * hall_price_per_hour
            discount = calculate_discount(hall_hours)
            hall_total_with_discount = hall_total - (hall_total * discount / 100)
            total_sum += hall_total_with_discount
    
    if 'food' in order['info']:
        for food_id, food_info in order['info']['food'].items():
            food_obj = await sync_to_async(Foods.objects.get)(id=food_id) 
            food_price = food_obj.price
            food_quantity = int(food_info['quantity'])
            total_sum += food_price * food_quantity
    
    if 'services' in order['info']:
        for service_id, service_info in order['info']['services'].items():
            service_obj = await sync_to_async(Services.objects.get)(id=service_id)  
            service_price = service_obj.price
            service_quantity = int(service_info['quantity'])
            total_sum += service_price * service_quantity
    
    if 'goods' in order['info']:
        for goods_id, goods_info in order['info']['goods'].items():
            goods_obj = await sync_to_async(Goods.objects.get)(id=goods_id)  
            goods_price = goods_obj.price
            goods_quantity = int(goods_info['quantity'])
            total_sum += goods_price * goods_quantity


    tg_id = int(tg_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    confirmation_url, pay_id = create(total_sum, tg_id)
    
    

    await callback.message.edit_text(f'–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ',reply_markup=kb.get_pay(confirmation_url, total_sum, pay_id, data_id))
@user_private.callback_query(F.data.startswith('check_'))
async def check_it(callback: CallbackQuery):
    tg_id = callback.from_user.id
    result = check(callback.data.split('_')[-1])
    order_id = callback.data.split('_')[-2]

    await callback.answer()

    if result:
        await callback.message.answer('–û—à–∏–±–∫–∞')
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –æ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏
        order_data = await get_web_data_all(order_id)
        if order_data:
            order_info = order_data[0]['order_data']
            username = callback.from_user.username
            phone_number = order_info['Order']['user']['phone']

            summa, discount = await get_summa(order_id)
            
            hall_info = order_info["Order"]["info"]["halls"]
            hall_id = list(hall_info.keys())[0]
            hall_name = hall_info[hall_id]["name"]
            hall_datetime = hall_info[hall_id]["datetime"]
            hall_hours = hall_info[hall_id]["hours"]
            
            additional_items = []
            if 'foods' in order_info["Order"]["info"]:
                food_items = order_info["Order"]["info"]["foods"].values()
                for food in food_items:
                    additional_items.append(f'{food["name"]} ({food["weight"]} –≥.) ‚Äî {food["price"]}‚ÇΩ x {food["quantity"]}')
            if 'services' in order_info["Order"]["info"]:
                service_items = order_info["Order"]["info"]["services"].values()
                for service in service_items:
                    additional_items.append(f'{service["name"]} ({service["time"]} –º–∏–Ω.) ‚Äî {service["price"]}‚ÇΩ')
            if 'goods' in order_info["Order"]["info"]:
                goods_items = order_info["Order"]["info"]["goods"].values()
                for goods in goods_items:
                    additional_items.append(f'{goods["name"]} ({goods["weight"]} –º–ª.) ‚Äî {goods["price"]}‚ÇΩ x {goods["quantity"]}')

            additional_items_str = "\n".join(f"{i+1}. {item}" for i, item in enumerate(additional_items))

            notify_text = (
                f'üÜï –ù–æ–≤–∞—è –±—Ä–æ–Ω—å –æ—Ç @{username}\n\n'
                f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–ª: {hall_name}\n'
                f'–î–∞—Ç–∞: {hall_datetime}\n'
                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {hall_hours}\n'
                f'–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n\n'
                f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n'
                f'{additional_items_str}\n\n'
                f'üí≥ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {summa} ‚ÇΩ (—Å–∫–∏–¥–∫–∞ {discount}%)'
            )

            await order_notify(-4500825826, notify_text)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Booked –∏ History —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await create_history(
                hall_id=hall_id,
                user_id=tg_id,
                book_time_str=hall_datetime,
                booking_time=hall_hours,
                order_data=order_data
            )

            await callback.message.edit_text(
                '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –Ø –±—É–¥—É \n'
                '–ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \n'
                '–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞'
            )